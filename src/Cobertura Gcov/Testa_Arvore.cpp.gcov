        -:    0:Source:Testa_Arvore.cpp
        -:    0:Programs:8
        -:    1:/*
        -:    2:*Propriedade de Andre Garrido Damaceno.
        -:    3:*mat. 15/0117531.
        -:    4:*/
        -:    5:
        -:    6:/**
        -:    7: * @file Testa_Arvore.cpp
        -:    8: * @author Andre Garrido Damaceno
        -:    9: * @brief Arquivo que contem os testes do jogo de 20 perguntas.
        -:   10: *
        -:   11: */
        -:   12:
        -:   13:/**Como esse arquivo contem os testes, necessita dos headers de toda
        -:   14: *a biblioteca do jogo.
        -:   15: */
        -:   16:
        -:   17:#define CATCH_CONFIG_MAIN
        -:   18:
        -:   19:/**@brief Header da biblioteca de testes.
        -:   20:*/
        -:   21:#ifndef _Catch
        -:   22:  #define _Catch
        -:   23:    #include "catch.hpp"
        -:   24:#endif
        -:   25:
        -:   26:/**@brief Header da biblioteca de arvore.
        -:   27:*/
        -:   28:#ifndef _Arvore_library
        -:   29:  #define _Arvore_library
        -:   30:    #include "Arvore.h"
        -:   31:#endif
        -:   32:
        -:   33:/**@brief Header da biblioteca de funções (criação de arquivo e concatenação de strings).
        -:   34:*/
        -:   35:#ifndef _Funcs_library
        -:   36:  #define _Funcs_library
        -:   37:    #include "Funcs.h"
        -:   38:#endif
        -:   39:
        -:   40:/**@brief Header da biblioteca de estruturação (execução) do jogo de 20 perguntas.
        -:   41:*/
        -:   42:#ifndef _Vinte_Perguntas_library
        -:   43:  #define _Vinte_Perguntas_library
        -:   44:    #include "Vinte_Perguntas.h"
        -:   45:#endif
        -:   46:
        -:   47:fpos_t pos;
       18:   48:int fd = dup(fileno(stdout));
        -:   49:
        -:   50:/**@brief Teste da função 'Constroi_Manual'
        -:   51:*
        -:   52:*Testes feitos e criterio de aceitação:
        -:   53:*Teste de criação de uma arvore NULL - criterio de aceitação é a arvore ser
        -:   54:*null e o programa se conter.
        -:   55:*Teste de criação no nó pai apenas - criterio de aceitação nó pai criado e os nós filhos NULL.
        -:   56:*Teste de criação no pai e no filho 'SIM' - criterio de aceitação pai nao ser NULL,
        -:   57:*filho 'sim' nao ser NULL, filho 'sim' 'sim' ser NULL, filho 'sim' 'nao' ser NULL e filho 'nao' ser
        -:   58:*NULL.
        -:   59:*Teste de criação no pai e no filho 'NAO' - criterio de aceitação pai nao
        -:   60:*ser NULL, filho 'nao' nao ser NULL, filho 'nao' 'sim' ser NULL, filho 'nao' 'nao'
        -:   61:*ser NULL e filho 'sim' ser NULL. Teste de criação de um nó pai, um nó filho 'sim',
        -:   62:*um nó filho 'nao' - criterio de aceitação pai nao ser NULL, filho 'nao' nao ser NULL,
        -:   63:*filho 'nao' 'sim' ser NULL, filho 'nao' 'nao' ser NULL, filho 'sim' não ser NULL
        -:   64:*filho 'sim' nao ser NULL e filho 'sim' 'sim' ser NULL.
        -:   65:*Todos os testes foram bem sucedidos.
        -:   66:*/
       36:   67:TEST_CASE( "Creating a tree from user input", "Prove that the tree is created" )
        -:   68:{
        -:   69:  arvore *ainicio;
       18:   70:  char pai[4] = "PAI";
       18:   71:  fgetpos(stdout, &pos);
       18:   72:  freopen("./Arquivos_de_teste/input.txt", "r", stdin);
       18:   73:  freopen("./Arquivos_de_teste/output.txt", "w", stdout);
       18:   74:  Constroi_Manual(&ainicio,pai,0);
       18:   75:  REQUIRE( ainicio == NULL );
       18:   76:  Constroi_Manual(&ainicio,pai,0);
       18:   77:  REQUIRE( ainicio != NULL );
       18:   78:  REQUIRE( ainicio->sim == NULL );
       18:   79:  REQUIRE( ainicio->nao == NULL );
       18:   80:  Constroi_Manual(&ainicio,pai,0);
       18:   81:  REQUIRE( ainicio != NULL );
       18:   82:  REQUIRE( ainicio->sim != NULL );
       18:   83:  REQUIRE( ainicio->sim->sim == NULL );
       18:   84:  REQUIRE( ainicio->sim->nao == NULL );
       18:   85:  REQUIRE( ainicio->nao == NULL );
       18:   86:  Constroi_Manual(&ainicio,pai,0);
       18:   87:  REQUIRE( ainicio != NULL );
       18:   88:  REQUIRE( ainicio->sim == NULL );
       18:   89:  REQUIRE( ainicio->nao->sim == NULL );
       18:   90:  REQUIRE( ainicio->nao->nao == NULL );
       18:   91:  REQUIRE( ainicio->nao != NULL );
       18:   92:  Constroi_Manual(&ainicio,pai,0);
       18:   93:  REQUIRE( ainicio != NULL );
       18:   94:  REQUIRE( ainicio->sim != NULL );
       18:   95:  REQUIRE( ainicio->sim->sim == NULL );
       18:   96:  REQUIRE( ainicio->sim->nao == NULL );
       18:   97:  REQUIRE( ainicio->nao != NULL );
       18:   98:  REQUIRE( ainicio->nao->sim == NULL );
       18:   99:  REQUIRE( ainicio->nao->nao == NULL );
       18:  100:}
        -:  101:
        -:  102:/**@brief Testes da função 'Constroi_TXT' - Criação normal da arvore.
        -:  103:*
        -:  104:*Testes feitos e criterio de aceitação:
        -:  105:*Teste de criação da arvore com um arquivo existente (onde os nós pai, filho 'sim'
        -:  106:*filho 'nao' existem na arvore), os criterios de aceitação foram os nós descritos
        -:  107:*serem iguais à frases escritas no teste (comparação feita por strcmp), e os dos filhos
        -:  108:*'sim' e 'nao' serem NULL.
        -:  109:*Todos os testes foram bem sucedidos.
        -:  110:*/
       36:  111:TEST_CASE( "Creating a tree from a file", "Prove that the tree is created" )
        -:  112:{
        -:  113:  arvore *ainicio;
        -:  114:  FILE *arq;
       18:  115:  arq = fopen("./Arquivos_de_teste/Perguntas.txt", "r");
       18:  116:  Constroi_TXT(&ainicio,arq);
       18:  117:  REQUIRE( ainicio != NULL );
       18:  118:  REQUIRE( strcmp(ainicio->Pergunta, "O objeto a ser descoberto é um aviao?") == 0);
       18:  119:  REQUIRE( strcmp(ainicio->sim->Pergunta, "O objeto é um abacaxi?") == 0);
       18:  120:  REQUIRE( strcmp(ainicio->nao->Pergunta, "O objeto é de comer?") == 0);
       18:  121:  REQUIRE( ainicio->sim->sim == NULL);
       18:  122:  REQUIRE( ainicio->sim->nao == NULL);
       18:  123:  REQUIRE( ainicio->nao->sim == NULL);
       18:  124:  REQUIRE( ainicio->nao->nao == NULL);
       18:  125:  fclose(arq);
       18:  126:}
        -:  127:
        -:  128:/**@brief Testes da função 'Constroi_TXT' - tentativa de criar arvore por arquivo Null
        -:  129:*
        -:  130:*Foi feito um teste, abrindo um arquivo inexistente pela função 'fopen', e passado
        -:  131:*o arquivo para a função 'Constroi_TXT', os criterios de aceitação são a Arvore
        -:  132:*ser NULL, e o programa não ter problemas em sua execução.
        -:  133:*O teste passou com sucesso, e tudo ocorreu como esperado.
        -:  134:*/
       36:  135:TEST_CASE( "Trying to create a tree from an non existing file", "Prove that the tree is not created" )
        -:  136:{
        -:  137:  arvore *ainicio;
        -:  138:  FILE *arq;
       18:  139:  arq = fopen("./Arquivos_de_teste/naoexiste.txt", "r");
       18:  140:  Constroi_TXT(&ainicio,arq);
       18:  141:  REQUIRE( ainicio == NULL );
       18:  142:}
        -:  143:
        -:  144:/**@brief Testes da função 'Salva_TXT' - tentativa de salvar arvore NULL.
        -:  145:*
        -:  146:*Foi feito um teste, abrindo um arquivo inexistente na forma "w", então
        -:  147:*foi salva uma arvore NULL no arquivo. Em seguida, foi aberto esse arquivo
        -:  148:*e construida a arvore a partir dele com a função 'Constroi_TXT', e por fim,
        -:  149:*o criterio de aceitação é a arvore criada ser NULL.
        -:  150:*O teste passou com sucesso, tudo ocorreu como esperado.
        -:  151:*/
       36:  152:TEST_CASE ("Trying to navigate to save a NULL tree to file", "Prove that the txt saves '.'")
        -:  153:{
       18:  154:  arvore *ainicio = NULL;
        -:  155:  FILE *arq;
       18:  156:  arq = fopen("./Arquivos_de_teste/NullTree.txt","w");
       18:  157:  Salva_TXT(&ainicio,arq);
       18:  158:  fclose(arq);
       18:  159:  arq = fopen("./Arquivos_de_teste/NullTree.txt","r");
       18:  160:  Constroi_TXT(&ainicio,arq);
       18:  161:  fclose(arq);
       18:  162:  REQUIRE(ainicio == NULL);
       18:  163:}
        -:  164:
        -:  165:/**@brief Testes da função 'Salva_TXT' - tentativa de salvar arvore existente.
        -:  166:*
        -:  167:*Foi aberto um arquivo txt existente com dados de arvore, criada a arvore pela
        -:  168:*função 'Constroi_TXT', em seguida foi salva a arvore criada pela função 'Salva_TXT'
        -:  169:*em um outro arquivo de texto inexistente ('Perguntas2.txt'), por fim, para verificar
        -:  170:*se tudo ocorreu como esperado, foi aberto esse arquivo txt, feito a arvore novamente,
        -:  171:*e checada todas as perguntas que existiam no arquivo, e também se todos os nós inexistentes
        -:  172:*da arvore eram NULL.
        -:  173:*Todos os criterios passaram, tudo ocorreu como esperado.
        -:  174:*/
       36:  175:TEST_CASE ("Saving a tree to file", "Prove that the txt saves the tree")
        -:  176:{
       18:  177:  arvore *ainicio = NULL;
        -:  178:  FILE *arq;
       18:  179:  arq = fopen("./Arquivos_de_teste/Perguntas.txt","r");
       18:  180:  Constroi_TXT(&ainicio,arq);
       18:  181:  fclose(arq);
       18:  182:  arq = fopen("./Arquivos_de_teste/Perguntas2.txt","w");
       18:  183:  Salva_TXT(&ainicio,arq);
       18:  184:  fclose(arq);
       18:  185:  arq = fopen("./Arquivos_de_teste/Perguntas2.txt","r");
       18:  186:  Constroi_TXT(&ainicio,arq);
       18:  187:  fclose(arq);
       18:  188:  REQUIRE( ainicio != NULL );
       18:  189:  REQUIRE( strcmp(ainicio->Pergunta, "O objeto a ser descoberto é um aviao?") == 0);
       18:  190:  REQUIRE( strcmp(ainicio->sim->Pergunta, "O objeto é um abacaxi?") == 0);
       18:  191:  REQUIRE( strcmp(ainicio->nao->Pergunta, "O objeto é de comer?") == 0);
       18:  192:  REQUIRE( ainicio->sim->sim == NULL);
       18:  193:  REQUIRE( ainicio->sim->nao == NULL);
       18:  194:  REQUIRE( ainicio->nao->sim == NULL);
       18:  195:  REQUIRE( ainicio->nao->nao == NULL);
       18:  196:}
        -:  197:
        -:  198:/**@brief Testes da função 'Salva_TXT' - tentativa de salvar arquivo inexistente.
        -:  199:*
        -:  200:*Foi aberto um arquivo txt na função "r", em seguida foi tentado salvar uma arvore
        -:  201:*NULL em um arquivo inexistente, os criterios de aceitação são a função se conter,
        -:  202:*a arvore ser NULL, o arquivo ser NULL.
        -:  203:*Todos os testes passaram com sucesso.
        -:  204:*/
       36:  205:TEST_CASE ("Saving tree to NULL file", "Prove that the function does nothing and contains the program")
        -:  206:{
       18:  207:  arvore *ainicio = NULL;
        -:  208:  FILE *arq;
       18:  209:  arq = fopen("./Arquivos_de_teste/naoexiste.txt", "r");
       18:  210:  Salva_TXT(&ainicio,arq);
       18:  211:  REQUIRE(ainicio == NULL);
       18:  212:  REQUIRE(arq == NULL);
       18:  213:}
        -:  214:
        -:  215:/**@brief Teste da função 'Desconstroi' - Apagando uma arvore existente
        -:  216:*
        -:  217:*Foi criada uma arvore por um txt existente, em seguida, foi verificado que
        -:  218:*a arvore não era NULL, por fim, foi chamada a função de desconstrução, e o
        -:  219:*criterio de aceitação é que a função apagasse a arvore e seu ponteiro fosse Null
        -:  220:*no final.
        -:  221:*Todos os testes passaram com sucesso.
        -:  222:*/
       36:  223:TEST_CASE ("Freeing an existing tree", "the tree is freed")
        -:  224:{
       18:  225:  arvore *ainicio = NULL;
        -:  226:  FILE *arq;
       18:  227:  arq = fopen("./Arquivos_de_teste/Perguntas.txt","r");
       18:  228:  Constroi_TXT(&ainicio,arq);
       18:  229:  fclose(arq);
       18:  230:  REQUIRE(ainicio != NULL);
       18:  231:  Desconstroi(&ainicio);
       18:  232:  REQUIRE(ainicio == NULL);
       18:  233:}
        -:  234:
        -:  235:/**@brief Teste da função 'Desconstroi' - Apagando uma arvore inexistente
        -:  236:*
        -:  237:*Foi passada para a função 'Desconstroi()' uma arvore NULL, o resultado
        -:  238:*esperado e criterio de aceitação é que o programa se contenha e que a
        -:  239:*arvore continue sendo NULL.
        -:  240:*Todos os testes passaram com sucesso.
        -:  241:*/
       36:  242:TEST_CASE ("Freeing a NULL tree", "the program is contained")
        -:  243:{
       18:  244:  arvore *ainicio = NULL;
       18:  245:  Desconstroi(&ainicio);
       18:  246:  REQUIRE(ainicio == NULL);
       18:  247:}
        -:  248:
        -:  249:/**@brief Teste da função Le - lendo arvore existente
        -:  250:*
        -:  251:*Foi criada uma arvore por um arquivo txt existente e passado
        -:  252:*o ponteiro da arvore para a função 'Le()', o criterio de aceitação
        -:  253:*é que a mensagem da pergunta apareça na tela e o ponteiro da arvore
        -:  254:*não seja alterado.
        -:  255:*Todos os testes passaram com sucesso.
        -:  256:*/
       36:  257:TEST_CASE("Reading a tree question", "tree is unmodified and question is read")
        -:  258:{
       18:  259:  arvore *ainicio = NULL;
        -:  260:  arvore *anterior;
        -:  261:  FILE *arq;
       18:  262:  arq = fopen("./Arquivos_de_teste/Perguntas.txt","r");
       18:  263:  Constroi_TXT(&ainicio,arq);
       18:  264:  fclose(arq);
       18:  265:  anterior = ainicio;
       18:  266:  Le(ainicio);
       18:  267:  REQUIRE(anterior == ainicio);
       18:  268:}
        -:  269:
        -:  270:/**@brief Teste da função Le - lendo arvore inexistente
        -:  271:*
        -:  272:*Foi passado um ponteiro NULL de arvore para a função 'Le()', o criterio de aceitação
        -:  273:*é que função não fizesse nada e se contenha e o ponteiro da arvore não fosse
        -:  274:*alterado de NULL.
        -:  275:*Todos os testes passaram com sucesso.
        -:  276:*/
       36:  277:TEST_CASE("Trying to read NULL tree", "Program is contained and function does nothing")
        -:  278:{
       18:  279:  arvore *ainicio = NULL;
        -:  280:  arvore *anterior;
       18:  281:  anterior = ainicio;
       18:  282:  Le(ainicio);
       18:  283:  REQUIRE(anterior == ainicio);
       18:  284:}
        -:  285:
        -:  286:/**@brief Testes de navegação (sim e nao) - arvore existente
        -:  287:*
        -:  288:*Foi criada uma arvore por um arquivo txt, e inicializado as variaveis navegasim,
        -:  289:*naveganao e ainiciobackup com o endereço da arvore e verificado se todas continham
        -:  290:*o endereço da arvore, em seguida, foi feita a navegação NavegaSim em navegasim e
        -:  291:*NavegaNao em naveganao e o criterio de aceitação foi se o resultado dos ponteiros eram iguais aos ponteiros
        -:  292:*da arvore original no nó 'sim' e 'nao', por fim, mais uma vez foi chamada as funções NavegaSim e NavegaNao
        -:  293:*e verificado se os nós eram NULL (para checar se eram iguais à arvore original que é NULL).
        -:  294:*Todos os testes e verificações foram bem sucedidas.
        -:  295:*/
       36:  296:TEST_CASE("Trying to navigate to '->sim' and '->nao' and reading the question", "Tree goes to specific navigation and reads the question")
        -:  297:{
       18:  298:  arvore *ainicio = NULL;
        -:  299:  arvore *navegasim, *naveganao, *ainiciobackup;
        -:  300:  FILE *arq;
       18:  301:  arq = fopen("./Arquivos_de_teste/Perguntas.txt","r");
       18:  302:  Constroi_TXT(&ainicio,arq);
       18:  303:  fclose(arq);
       18:  304:  navegasim = ainicio;
       18:  305:  naveganao = ainicio;
       18:  306:  ainiciobackup = ainicio;
       18:  307:  REQUIRE(navegasim != NULL);
       18:  308:  REQUIRE(naveganao != NULL);
       18:  309:  REQUIRE(ainicio != NULL);
       18:  310:  REQUIRE(ainicio == ainiciobackup);
       18:  311:  NavegaSim(&navegasim);
       18:  312:  NavegaNao(&naveganao);
       18:  313:  REQUIRE(navegasim == ainicio->sim);
       18:  314:  REQUIRE(naveganao == ainicio->nao);
       18:  315:  NavegaSim(&navegasim);
       18:  316:  NavegaNao(&naveganao);
       18:  317:  REQUIRE(navegasim == NULL);
       18:  318:  REQUIRE(naveganao == NULL);
       18:  319:}
        -:  320:
        -:  321:/**@brief Testes de navegação (sim e nao) - arvore inexistente
        -:  322:*
        -:  323:*Para esse teste, foi criado um ponteiro NULL, e feito a navegação de
        -:  324:*NavegaSim e NavegaNao passando como parametro o ponteiro NULL, para criterio
        -:  325:*de aceitação, verifica-se se a função se conteve e se os ponteiros continuam
        -:  326:*sendo NULL.
        -:  327:*Todos os testes e verificações foram bem sucedidos.
        -:  328:*/
       36:  329:TEST_CASE("Trying to navigate to '->sim' and '->nao' whith NULL tree", "Program is contained and function returns 2")
        -:  330:{
       18:  331:  arvore *ainicio = NULL;
        -:  332:  arvore *navegasim, *naveganao;
       18:  333:  navegasim = ainicio;
       18:  334:  naveganao = ainicio;
       18:  335:  NavegaSim(&navegasim);
       18:  336:  NavegaNao(&naveganao);
       18:  337:  REQUIRE(navegasim == NULL);
       18:  338:  REQUIRE(naveganao == NULL);
       18:  339:}
        -:  340:
        -:  341:/**@brief Teste da função 'CriaArquivo' - arquivos existentes "r" e "w" e arquivos inexistentes
        -:  342:*
        -:  343:*Primeiramente é aberto um arquivo com a função "r", e criado uma arvore a partir desse arquivo,
        -:  344:*o teste de aceitação é que todos os nós do arquivo sejam iguais à strings colocadas no teste.
        -:  345:*Em seguida, cria-se um arquivo com a função "w", e é feito o teste de escrita, usando a função
        -:  346:*'Salva_TXT' para salvar a arvore no arquivo de texto, o criterio de aceitação é a função se
        -:  347:*conter e o arquivo ser criado com sucesso.
        -:  348:*Por fim, checa-se a abertura de um arquivo inexistente (passando o nome de um arquivo que nao
        -:  349:*se encontra no computador), o criterio de aceitação é que o arquivo seja NULL.
        -:  350:*Todos os testes e criterios passaram com sucesso.
        -:  351:*/
       36:  352:TEST_CASE("Creating/Opening a file (read) and (write)", "Function opens/creates the file")
        -:  353:{
       18:  354:  arvore *ainicio=NULL;
       18:  355:  char abrirP[28] = "Aberto (DIGITE 'teste.txt')";
       18:  356:  char abrirE[30] = "Aberto (DIGITE 'escreve.txt')";
       18:  357:  char Escrever[31] = "Escrito (DIGITE 'escreve.txt')";
       18:  358:  char qlqr[57] = "aberto - (DIGITE QUALQUER COISA QUE NAO SEJA UM ARQUIVO)";
       18:  359:  char r[2] = "r";
       18:  360:  char w[2] = "w";
        -:  361:  FILE *arq;
       18:  362:  arq = CriaArquivo(r,(char *)abrirP);
       18:  363:  REQUIRE(arq != NULL);
       12:  364:  Constroi_TXT(&ainicio,arq);
       12:  365:  REQUIRE(ainicio != NULL);
       10:  366:  REQUIRE( strcmp(ainicio->Pergunta, "O objeto a ser descoberto é um aviao?") == 0);
       10:  367:  REQUIRE( strcmp(ainicio->sim->Pergunta, "O objeto é um abacaxi?") == 0);
       10:  368:  REQUIRE( strcmp(ainicio->nao->Pergunta, "O objeto é de comer?") == 0);
       10:  369:  fclose(arq);
       10:  370:  arq = CriaArquivo(w, (char *)Escrever);
       10:  371:  REQUIRE(arq != NULL);
        6:  372:  Salva_TXT(&ainicio,arq);
        6:  373:  fclose(arq);
        6:  374:  arq = CriaArquivo(r, (char *)abrirE);
        6:  375:  Constroi_TXT(&ainicio,arq);
        6:  376:  REQUIRE( strcmp(ainicio->Pergunta, "O objeto a ser descoberto é um aviao?") == 0);
        6:  377:  REQUIRE( strcmp(ainicio->sim->Pergunta, "O objeto é um abacaxi?") == 0);
        6:  378:  REQUIRE( strcmp(ainicio->nao->Pergunta, "O objeto é de comer?") == 0);
        6:  379:  fclose(arq);
        6:  380:  arq = CriaArquivo(r, qlqr);
        6:  381:  REQUIRE(arq == NULL);
        6:  382:}
        -:  383:
        -:  384:/**@brief Testando a função 'PosicaoNo' - Concatenação de strings existente e inexistente
        -:  385:*
        -:  386:*São declaradas strings e feito criterios de aceitação, usando a função 'strcmp' para
        -:  387:*comparar as strings concatenadas com strings digitadas no teste, testando inclusive a
        -:  388:*concatenação de duas strings vazias, sendo o resultado valido da concatenação string vazia.
        -:  389:*Todos os testes e criterios passaram com sucesso.
        -:  390:*/
       36:  391:TEST_CASE("Function that concatenates strings", "Should concatenate the string")
        -:  392:{
       18:  393:  char tes[4] = "tes";
       18:  394:  char tando[6] = "tando";
       18:  395:  char vazio[1] = "";
        -:  396:
       18:  397:  REQUIRE(strcmp(PosicaoNo(tes,tando),"testando") == 0);
       18:  398:  REQUIRE(strcmp(PosicaoNo(vazio,tando),"tando") == 0);
       18:  399:  REQUIRE(strcmp(PosicaoNo(tes,vazio),"tes") == 0);
       18:  400:  REQUIRE(strcmp(PosicaoNo(vazio,vazio),"") == 0);
       18:  401:  REQUIRE(strcmp(PosicaoNo(tando,tes),"tandotes") == 0);
       18:  402:}
        -:  403:
        -:  404:/**@brief Testando a função 'Resposta' - teste para o tipo 'simples', 'multipla' e inicializacao
        -:  405:*
        -:  406:*Os testes são feitos ao passar todas as possiveis combinações (maiusculo ou minusculo) dos
        -:  407:*resultados das possiveis respostas, e feito uma comparação se a resposta é como a esperada.
        -:  408:*O criterio de aceitação é que todas as variaveis em todas as suas combinações possiveis de
        -:  409:*maiusculo e minusculo sejam reconhecidos, e que as mensagens de erro ao digitar um caracter
        -:  410:*invalido seja exibido de forma correta na tela.
        -:  411:*Todos os testes e requisitos passaram com sucesso.
        -:  412:*/
       36:  413:TEST_CASE("Testing user's answers in game", "Get only 'sim', 'nao', 'editar', 'apagar' answer and nothing else")
        -:  414:{
       18:  415:  REQUIRE(Resposta(multipla) == Rsim);
       18:  416:  REQUIRE(Resposta(multipla) == Rnao);
       18:  417:  REQUIRE(Resposta(multipla) == Rapagar);
       18:  418:  REQUIRE(Resposta(multipla) == Reditar);
       18:  419:  REQUIRE(Resposta(multipla) == Rsim);
       18:  420:  REQUIRE(Resposta(multipla) == Rnao);
       18:  421:  REQUIRE(Resposta(multipla) == Rapagar);
       18:  422:  REQUIRE(Resposta(multipla) == Reditar);
       18:  423:  REQUIRE(Resposta(multipla) == Reditar);
       18:  424:  REQUIRE(Resposta(simples) == Rsim);
       18:  425:  REQUIRE(Resposta(simples) == Rnao);
       18:  426:  REQUIRE(Resposta(simples) == Rsim);
       18:  427:  REQUIRE(Resposta(simples) == Rnao);
       18:  428:  REQUIRE(Resposta(simples) == Rsim);
       18:  429:  REQUIRE(Resposta(inicializacao) == Rabrir);
       18:  430:  REQUIRE(Resposta(inicializacao) == Rcriar);
       18:  431:  REQUIRE(Resposta(inicializacao) == Rabrir);
       18:  432:  REQUIRE(Resposta(inicializacao) == Rcriar);
       18:  433:  REQUIRE(Resposta(inicializacao) == Rabrir);
       18:  434:}
        -:  435:
        -:  436:/**@brief Teste da função 'Vinte_Perguntas' - Arvore inexistente
        -:  437:*
        -:  438:*Nesse teste, foi testado o comportamento da função 'Vinte_Perguntas' quando recebe
        -:  439:*uma arvore Null, sendo o primeiro requisito que a arvore continuasse NULL, e que no segundo
        -:  440:*requisito que a arvore fosse criada (no minimo um nó).
        -:  441:*Todos os testes e requisitos passaram com sucesso.
        -:  442:*/
       36:  443:TEST_CASE("Receiving null tree or object was not guessed by Vinte_Perguntas", "The function should be contained, should ask the user to add more questions if less than 20 answers")
        -:  444:{
       18:  445:  arvore *ainicio = NULL;
       18:  446:  Vinte_Perguntas(&ainicio,0);
       18:  447:  REQUIRE(ainicio == NULL);
       18:  448:  Vinte_Perguntas(&ainicio,0);
       18:  449:  REQUIRE(ainicio != NULL);
       18:  450:}
        -:  451:
        -:  452:/**@brief Teste da função 'Vinte_Perguntas' - Arvore existente, cheia, edição, apagar
        -:  453:*
        -:  454:*Foi testado inicialmente o comportamento da função 'Vinte_Perguntas' ao receber e navegar até o final de uma
        -:  455:*arvore com as 20 perguntas preenchidas, o criterio de aceitação é que o jogo finalizasse se o usuario chegou ou não
        -:  456:*no objeto que ele estava pensando. O outro teste foi de edição do nó principal, o criterio de aceitação foi que a string
        -:  457:*editada seja igual à string digitada no teste, e por fim, foi testado diversas situações de apagar, sendo as situações
        -:  458:*de apagar o nó pai, apagar os nós filhos e desistir de apagar um nó, para cada situação, respectivamente o criterio de
        -:  459:*aceitação é que o nó pai seja NULL, nós filhos sejam NULLs, nada ocorrece ao desistir de apagar e o jogo retorne normalmente
        -:  460:*na ultima pergunta não respondida (que foi tentada ser apagada).
        -:  461:*Todos os testes e requisitos passaram com sucesso.
        -:  462:*/
       36:  463:TEST_CASE("Receiving 20 questions and testing 'apagar' and 'editar' in Vinte_Perguntas", "The function should ask the questions and navigate in the tree, and execute its functions 'apagar', 'editar'")
        -:  464:{
        -:  465:  arvore *ainicio;
        -:  466:  FILE *arq;
       18:  467:  char test[6] = "TESTE";
       18:  468:  arq = fopen("./Arquivos_de_teste/Vinte.txt","r");
       18:  469:  Constroi_TXT(&ainicio,arq);
       18:  470:  Vinte_Perguntas(&ainicio,0);
       18:  471:  REQUIRE(ainicio != NULL);
       18:  472:  Vinte_Perguntas(&ainicio,0);
       18:  473:  REQUIRE(ainicio != NULL);
       18:  474:  Vinte_Perguntas(&ainicio,0);
       18:  475:  REQUIRE(strcmp(ainicio->Pergunta,test) == 0);
       18:  476:  Vinte_Perguntas(&ainicio,0);
       18:  477:  REQUIRE(ainicio == NULL);
       18:  478:  arq = fopen("./Arquivos_de_teste/Perguntas.txt","r");
       18:  479:  Constroi_TXT(&ainicio,arq);
       18:  480:  Vinte_Perguntas(&ainicio,0);
       18:  481:  REQUIRE(ainicio != NULL);
       18:  482:  REQUIRE(ainicio->sim == NULL);
       18:  483:  arq = fopen("./Arquivos_de_teste/Perguntas.txt","r");
       18:  484:  Constroi_TXT(&ainicio,arq);
       18:  485:  Vinte_Perguntas(&ainicio,0);
       18:  486:  REQUIRE(ainicio != NULL);
       18:  487:  REQUIRE(ainicio->nao == NULL);
       18:  488:  arq = fopen("./Arquivos_de_teste/Vinte.txt","r");
       18:  489:  Constroi_TXT(&ainicio,arq);
       18:  490:  Vinte_Perguntas(&ainicio,0);
       18:  491:  REQUIRE(ainicio != NULL);
       18:  492:  REQUIRE(ainicio->nao == NULL);
       18:  493:}
        -:  494:
        -:  495:/**@brief Teste da função 'Pergunta_Final'
        -:  496:*
        -:  497:*Foi aberto um arquivo txt e criado uma arvore, em seguida passada essa arvore para a função
        -:  498:*'Pergunta_Final', com o intuido da criação de um novo nó 'sim' na arvore, o criterio de aceitação
        -:  499:*é que o nó fosse criado com sucesso e que seus filhos fossem NULL, em seguida, novamente foi feito
        -:  500:*o mesmo teste só que para o nó 'nao', o criterio é que o nó 'nao' seja existente e seus filhos sejam
        -:  501:*NULL.
        -:  502:*Todos os testes passaram com sucesso.
        -:  503:*/
       36:  504:TEST_CASE("Creating childs at the end in 'sim' and 'nao'", "Should normaly create childs")
        -:  505:{
       18:  506:  arvore *ainicio = NULL, *anterior = NULL;
        -:  507:  FILE *arq;
       18:  508:  arq = fopen("./Arquivos_de_teste/Perguntas3.txt","r");
       18:  509:  Constroi_TXT(&anterior,arq);
       18:  510:  Pergunta_Final(&anterior, &ainicio, 0, Rsim);
       18:  511:  REQUIRE(anterior != NULL);
       18:  512:  REQUIRE(anterior->sim != NULL);
       18:  513:  REQUIRE(anterior->nao == NULL);
       18:  514:  fclose(arq);
       18:  515:  arq = fopen("./Arquivos_de_teste/Perguntas3.txt","r");
       18:  516:  Constroi_TXT(&ainicio,arq);
       18:  517:  Pergunta_Final(&ainicio, &anterior, 0, Rsim);
       18:  518:  REQUIRE(ainicio != NULL);
       18:  519:  REQUIRE(ainicio->sim == NULL);
       18:  520:  REQUIRE(ainicio->nao != NULL);
       18:  521:  fclose(arq);
       18:  522:  fflush(stdout);
       18:  523:  dup2(fd, fileno(stdout));
       18:  524:  close(fd);
       18:  525:  clearerr(stdout);
       18:  526:  fsetpos(stdout, &pos);
       72:  527:}
        -:  528:
        -:  529:/**@brief Conclusões
        -:  530:*
        -:  531:*As descrições dos parametros das funções estão descritos nos .c de todas as funções.
        -:  532:*A unica função que foi observado um resultado não desejado foi a 'Resposta', que quando
        -:  533:*digitado mais que 6 caracteres, ela imprime na tela mais de uma vez a mensagem de erro. Isso
        -:  534:*pode ser contornado ao aumentar o limite de leitura do scanf, porem, sempre averá um limite de
        -:  535:*leitura. Fora esse problema, não foram encontradas nenhumas alteração no comportamento das funções
        -:  536:*em geral, todas foram testadas intensamente durante sua criação, e apresentam uma excelente consistencia
        -:  537:*em seu uso.
        -:  538:*/
